.TH "srcs/tcpreplay/tcp_replay.h" 3 "Tue Apr 13 2021" "Version v1.0" "ddos_util" \" -*- nroff -*-
.ad l
.nh
.SH NAME
srcs/tcpreplay/tcp_replay.h
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBip_pair\fP"
.br
.ti -1c
.RI "struct \fBport_pair\fP"
.br
.ti -1c
.RI "struct \fBsession\fP"
.br
.ti -1c
.RI "struct \fBsudo_packet_data\fP"
.br
.ti -1c
.RI "struct \fBpcap_hdr\fP"
.br
.ti -1c
.RI "struct \fBpcaprec_hdr\fP"
.br
.ti -1c
.RI "struct \fBsniff_ethernet\fP"
.br
.ti -1c
.RI "struct \fBsniff_ip\fP"
.br
.ti -1c
.RI "struct \fBsniff_tcp\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIP_RF\fP   0x8000        /* reserved fragment flag */"
.br
.ti -1c
.RI "#define \fBIP_DF\fP   0x4000        /* dont fragment flag */"
.br
.ti -1c
.RI "#define \fBIP_MF\fP   0x2000        /* more fragments flag */"
.br
.ti -1c
.RI "#define \fBIP_OFFMASK\fP   0x1fff   /* mask for fragmenting bits */"
.br
.ti -1c
.RI "#define \fBIP_HL\fP(ip)   (((ip)\->ip_vhl) & 0x0f)"
.br
.ti -1c
.RI "#define \fBIP_V\fP(ip)   (((ip)\->ip_vhl) >> 4)"
.br
.ti -1c
.RI "#define \fBTH_OFF\fP(th)   (((th)\->th_offx2 & 0xf0) >> 4)"
.br
.ti -1c
.RI "#define \fBTH_FIN\fP   0x01"
.br
.ti -1c
.RI "#define \fBTH_SYN\fP   0x02"
.br
.ti -1c
.RI "#define \fBTH_RST\fP   0x04"
.br
.ti -1c
.RI "#define \fBTH_PUSH\fP   0x08"
.br
.ti -1c
.RI "#define \fBTH_ACK\fP   0x10"
.br
.ti -1c
.RI "#define \fBTH_URG\fP   0x20"
.br
.ti -1c
.RI "#define \fBTH_ECE\fP   0x40"
.br
.ti -1c
.RI "#define \fBTH_CWR\fP   0x80"
.br
.ti -1c
.RI "#define \fBTH_FLAGS\fP   (\fBTH_FIN\fP|\fBTH_SYN\fP|\fBTH_RST\fP|\fBTH_ACK\fP|\fBTH_URG\fP|\fBTH_ECE\fP|\fBTH_CWR\fP)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "u_short \fBtcp_get_checksum_for_tcp_replay\fP (struct \fBsniff_tcp\fP *, char *data, int datasize)"
.br
.ti -1c
.RI "int \fBsession_match_check\fP (struct \fBsession\fP a_session, struct \fBsession\fP b_session)"
.br
.ti -1c
.RI "int \fBsession_exist_check\fP (struct \fBsession\fP *session_list, \fB__u16\fP session_num, struct \fBsession\fP a_session)"
.br
.ti -1c
.RI "int \fBsession_table_check\fP (struct \fBsession\fP *session_list, \fB__u16\fP session_num, struct \fBsession\fP a_session)"
.br
.ti -1c
.RI "int \fBip_pair_match_check\fP (struct \fBip_pair\fP pair1, struct \fBip_pair\fP pair2)"
.br
.ti -1c
.RI "int \fBip_pair_exist_check\fP (struct \fBip_pair\fP *pairs, struct \fBip_pair\fP new_pair, int count)"
.br
.ti -1c
.RI "int \fBip_table_check\fP (struct \fBip_pair\fP *table, char ip[16], int size)"
.br
.ti -1c
.RI "struct \fBip_pair\fP * \fBip_table_element_to_end\fP (struct \fBip_pair\fP *table_p, int index, int size)"
.br
.ti -1c
.RI "int \fBport_pair_match_check\fP (struct \fBport_pair\fP pair1, struct \fBport_pair\fP pair2)"
.br
.ti -1c
.RI "int \fBport_pair_exist_check\fP (struct \fBport_pair\fP *pairs, struct \fBport_pair\fP new_pair, int count)"
.br
.ti -1c
.RI "int \fBport_table_check\fP (struct \fBport_pair\fP *table, \fB__u8\fP port, int size)"
.br
.ti -1c
.RI "struct \fBport_pair\fP * \fBport_table_element_to_end\fP (struct \fBport_pair\fP *table_p, int index, int size)"
.br
.ti -1c
.RI "char * \fBget_masked_ip_addr\fP (char *current, \fB__u8\fP mask)"
.br
.ti -1c
.RI "void * \fBtcpreplay_thread\fP ()"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define IP_DF   0x4000        /* dont fragment flag */"

.PP
Definition at line 63 of file tcp_replay\&.h\&.
.SS "#define IP_HL(ip)   (((ip)\->ip_vhl) & 0x0f)"

.PP
Definition at line 71 of file tcp_replay\&.h\&.
.SS "#define IP_MF   0x2000        /* more fragments flag */"

.PP
Definition at line 64 of file tcp_replay\&.h\&.
.SS "#define IP_OFFMASK   0x1fff   /* mask for fragmenting bits */"

.PP
Definition at line 65 of file tcp_replay\&.h\&.
.SS "#define IP_RF   0x8000        /* reserved fragment flag */"

.PP
Definition at line 62 of file tcp_replay\&.h\&.
.SS "#define IP_V(ip)   (((ip)\->ip_vhl) >> 4)"

.PP
Definition at line 72 of file tcp_replay\&.h\&.
.SS "#define TH_ACK   0x10"

.PP
Definition at line 86 of file tcp_replay\&.h\&.
.SS "#define TH_CWR   0x80"

.PP
Definition at line 89 of file tcp_replay\&.h\&.
.SS "#define TH_ECE   0x40"

.PP
Definition at line 88 of file tcp_replay\&.h\&.
.SS "#define TH_FIN   0x01"

.PP
Definition at line 82 of file tcp_replay\&.h\&.
.SS "#define TH_FLAGS   (\fBTH_FIN\fP|\fBTH_SYN\fP|\fBTH_RST\fP|\fBTH_ACK\fP|\fBTH_URG\fP|\fBTH_ECE\fP|\fBTH_CWR\fP)"

.PP
Definition at line 90 of file tcp_replay\&.h\&.
.SS "#define TH_OFF(th)   (((th)\->th_offx2 & 0xf0) >> 4)"

.PP
Definition at line 80 of file tcp_replay\&.h\&.
.SS "#define TH_PUSH   0x08"

.PP
Definition at line 85 of file tcp_replay\&.h\&.
.SS "#define TH_RST   0x04"

.PP
Definition at line 84 of file tcp_replay\&.h\&.
.SS "#define TH_SYN   0x02"

.PP
Definition at line 83 of file tcp_replay\&.h\&.
.SS "#define TH_URG   0x20"

.PP
Definition at line 87 of file tcp_replay\&.h\&.
.SH "Function Documentation"
.PP 
.SS "char* get_masked_ip_addr (char * current, \fB__u8\fP mask)"

.PP
Definition at line 721 of file tcp_replay\&.c\&.
.SS "int ip_pair_exist_check (struct \fBip_pair\fP * pairs, struct \fBip_pair\fP new_pair, int count)"

.PP
Definition at line 615 of file tcp_replay\&.c\&.
.SS "int ip_pair_match_check (struct \fBip_pair\fP pair1, struct \fBip_pair\fP pair2)"

.PP
Definition at line 596 of file tcp_replay\&.c\&.
.SS "int ip_table_check (struct \fBip_pair\fP * table, char ip[16], int size)"

.PP
Definition at line 627 of file tcp_replay\&.c\&.
.SS "struct \fBip_pair\fP* ip_table_element_to_end (struct \fBip_pair\fP * table_p, int index, int size)"

.PP
Definition at line 639 of file tcp_replay\&.c\&.
.SS "int port_pair_exist_check (struct \fBport_pair\fP * pairs, struct \fBport_pair\fP new_pair, int count)"

.PP
Definition at line 675 of file tcp_replay\&.c\&.
.SS "int port_pair_match_check (struct \fBport_pair\fP pair1, struct \fBport_pair\fP pair2)"

.PP
Definition at line 657 of file tcp_replay\&.c\&.
.SS "int port_table_check (struct \fBport_pair\fP * table, \fB__u8\fP port, int size)"

.PP
Definition at line 688 of file tcp_replay\&.c\&.
.SS "struct \fBport_pair\fP* port_table_element_to_end (struct \fBport_pair\fP * table_p, int index, int size)"

.PP
Definition at line 700 of file tcp_replay\&.c\&.
.SS "int session_exist_check (struct \fBsession\fP * session_list, \fB__u16\fP session_num, struct \fBsession\fP a_session)"

.PP
Definition at line 566 of file tcp_replay\&.c\&.
.SS "int session_match_check (struct \fBsession\fP a_session, struct \fBsession\fP b_session)"

.PP
Definition at line 541 of file tcp_replay\&.c\&.
.SS "int session_table_check (struct \fBsession\fP * session_list, \fB__u16\fP session_num, struct \fBsession\fP a_session)"

.PP
Definition at line 583 of file tcp_replay\&.c\&.
.SS "u_short tcp_get_checksum_for_tcp_replay (struct \fBsniff_tcp\fP * snifftcp, char * data, int datasize)"

.PP
Definition at line 792 of file tcp_replay\&.c\&.
.SS "void* tcpreplay_thread ()"

.PP
Definition at line 828 of file tcp_replay\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ddos_util from the source code\&.
